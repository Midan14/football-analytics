"""Football Analytics - Services PackageInicialización y exposición de todos los servicios del sistema"""import logging# Solo importar servicios que existentry:    from .data_collector import DataCollectorServiceexcept ImportError:    DataCollectorService = Nonetry:    from .live_tracker import LiveTrackerServiceexcept ImportError:    LiveTrackerService = Nonetry:    from .odds_calculator import OddsCalculatorServiceexcept ImportError:    OddsCalculatorService = Nonetry:    from .predictor import PredictorServiceexcept ImportError:    PredictorService = None# Versión del paquete de servicios__version__ = "1.0.0"# Exportar servicios disponibles__all__ = [    "DataCollectorService",    "LiveTrackerService",     "OddsCalculatorService",    "PredictorService",]# Registry de servicios para gestión centralizada_service_registry = {}_initialized = Falsedef initialize_services(config: dict = None) -> bool:    """    Inicializa todos los servicios del sistema (versión simplificada)    """    global _service_registry, _initialized        try:        _service_registry = {            "data": "DataService-placeholder",            "prediction": "PredictionService-placeholder",             "analysis": "AnalysisService-placeholder",            "betting": "BettingService-placeholder",            "cache": "CacheService-placeholder",            "model": "ModelService-placeholder",        }                _initialized = True                logger = logging.getLogger(__name__)        logger.info(f"✅ Servicios inicializados: {len(_service_registry)} servicios")                return True            except Exception as e:        logger = logging.getLogger(__name__)        logger.error(f"❌ Error inicializando servicios: {e}")        return Falsedef get_service_status() -> dict:    """Obtiene el estado de todos los servicios"""    return {        "initialized": _initialized,        "services_count": len(_service_registry),        "services": list(_service_registry.keys()) if _initialized else [],    }def shutdown_services() -> bool:    """Apaga todos los servicios"""    global _service_registry, _initialized        try:        _service_registry.clear()        _initialized = False        return True    except Exception:        return False# Configuración de logginglogging.getLogger(__name__).addHandler(logging.NullHandler())